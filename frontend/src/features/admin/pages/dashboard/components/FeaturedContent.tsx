import React from 'react';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { apiRequest } from '@/lib/api';
import { useToast } from '@/hooks/use-toast';
import { ImageUpload } from '@/components/ImageUpload';
export function FeaturedContent (props: any)) {
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const [activeTab, setActiveTab] = useState('banners');
    const { data: featuredContent, isLoading } = useQuery({
        queryKey: ['/api/admin/featured-content'],
        queryFn: async () => {
            const response = await apiRequest({
                method: 'GET',
                url: '/api/admin/featured-content'
            });
            return response.json();
        }
    });
    const { mutate: updateContent } = useMutation({
        mutationFn: async (content) => {
            const response = await apiRequest({
                method: 'PUT',
                url: `/api/admin/featured-content/${content.id}`,
                data: content
            });
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries(['/api/admin/featured-content']);
            toast({
                title: 'Contenido actualizado',
                description: 'El contenido destacado ha sido actualizado correctamente'
            });
        }
    });
    const { mutate: toggleAutoGeneration } = useMutation({
        mutationFn: async ({ id, isAutoGenerated }) => {
            const response = await apiRequest({
                method: 'PATCH',
                url: `/api/admin/featured-content/${id}/auto-generation`,
                data: { isAutoGenerated }
            });
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries(['/api/admin/featured-content']);
            toast({
                title: 'Generación automática actualizada',
                description: 'La configuración de generación automática ha sido actualizada'
            });
        }
    });
    const handleImageUpload = async (file, contentId) => {
        try {
            const formData = new FormData();
            formData.append('image', file);
            const response = await apiRequest({
                method: 'POST',
                url: `/api/admin/featured-content/${contentId}/image`,
                data: formData
            });
            return response.json();
        }
        catch (error) {
            console.error('Error uploading image:', error);
            throw error;
        }
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h2", { className: "text-lg font-semibold", children: "Contenido Destacado" }), _jsx(Button, { onClick: () => setActiveTab('settings'), children: "Configuraci\u00F3n de Recomendaciones" })] }), _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, children: [_jsxs(TabsList, { children: [_jsx(TabsTrigger, { value: "banners", children: "Banners" }), _jsx(TabsTrigger, { value: "products", children: "Productos" }), _jsx(TabsTrigger, { value: "artists", children: "Artistas" }), _jsx(TabsTrigger, { value: "blog", children: "Blog" }), _jsx(TabsTrigger, { value: "events", children: "Eventos" }), _jsx(TabsTrigger, { value: "settings", children: "Configuraci\u00F3n" })] }), ['banners', 'products', 'artists', 'blog', 'events'].map((type) => (_jsx(TabsContent, { value: type, children: _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: featuredContent
                                ?.filter((content) => content.type === type)
                                .map((content) => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm font-medium", children: content.title }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "relative aspect-video", children: [_jsx("img", { src: content.imageUrl, alt: content.title, className: "w-full h-full object-cover rounded-lg" }), _jsx(ImageUpload, { onUpload: (file) => handleImageUpload(file, content.id), className: "absolute inset-0" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Generaci\u00F3n Autom\u00E1tica" }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, { checked: content.isAutoGenerated, onCheckedChange: (checked) => toggleAutoGeneration({
                                                                        id: content.id,
                                                                        isAutoGenerated: checked
                                                                    }) }), _jsx("span", { className: "text-sm text-muted-foreground", children: content.isAutoGenerated
                                                                        ? 'Generado automáticamente'
                                                                        : 'Manual' })] })] }), content.isAutoGenerated && (_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Audiencia Objetivo" }), _jsxs("div", { className: "text-sm text-muted-foreground", children: [content.targetAudience?.interests?.length ? (_jsxs("div", { children: [_jsx("strong", { children: "Intereses:" }), ' ', content.targetAudience.interests.join(', ')] })) : null, content.targetAudience?.location && (_jsxs("div", { children: [_jsx("strong", { children: "Ubicaci\u00F3n:" }), ' ', content.targetAudience.location] })), content.targetAudience?.ageRange && (_jsxs("div", { children: [_jsx("strong", { children: "Rango de edad:" }), ' ', content.targetAudience.ageRange.min, " -", ' ', content.targetAudience.ageRange.max, " a\u00F1os"] }))] })] })), _jsx("div", { className: "flex justify-end space-x-2", children: _jsx(Button, { variant: "outline", onClick: () => updateContent(content), children: "Guardar Cambios" }) })] }) })] }, content.id))) }) }, type))), _jsx(TabsContent, { value: "settings", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Configuraci\u00F3n de Recomendaciones" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Algoritmo de Recomendaci\u00F3n" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Basado en Intereses" }) }), _jsx(CardContent, { children: _jsx("p", { className: "text-sm text-muted-foreground", children: "Recomienda contenido basado en los intereses y comportamiento del usuario" }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Basado en Popularidad" }) }), _jsx(CardContent, { children: _jsx("p", { className: "text-sm text-muted-foreground", children: "Recomienda contenido basado en tendencias y popularidad" }) })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Filtros de Contenido" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, { id: "location" }), _jsx(Label, { htmlFor: "location", children: "Considerar ubicaci\u00F3n del usuario" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, { id: "age" }), _jsx(Label, { htmlFor: "age", children: "Considerar edad del usuario" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Switch, { id: "history" }), _jsx(Label, { htmlFor: "history", children: "Considerar historial de interacciones" })] })] })] })] }) })] }) })] })] }));
}
